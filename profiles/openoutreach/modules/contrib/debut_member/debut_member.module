<?php

include_once('debut_member.features.inc');

/**
 * Implements hook_init().
 */
function debut_member_init() {
  drupal_add_css(drupal_get_path('module', 'debut_member') . '/debut_member.css');
}

/**
 * Implements hook_menu_alter().
 *
 * Add a local action link to the member view page.
 */
function debut_member_menu_alter(&$items) {
  if (isset($items['node/add/member-page'])) {
    $items['member-page/add'] = $items['node/add/member-page'];
    $items['member-page/add']['title'] = 'Add a new member page.';
    $items['member-page/add']['type'] = MENU_LOCAL_ACTION;
  }
}

/**
 * Implements hook_admin_paths().
 *
 * Declare member-page/add as an admin path to trigger e.g. admin theme and overlay.
 */
function debut_member_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'member-page/add' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_features_export_alter().
 *
 * Remove the tags vocabulary, which we create at install time so as not to
 * create a dependency on a feature providing the vocabulary.
 */
function debut_member_features_export_alter(&$export, $module_name) {
  if ($module_name == 'debut_member' && isset($export['features']['taxonomy']) && isset($export['features']['taxonomy']['tags'])) {
    unset($export['features']['taxonomy']['tags']);
  }
}

/**
 * Implements hook_field_default_fields_alter().
 *
 * If debut_media module is present, use an image style it provides instead of
 * the default 'large' style.
 */
function debut_member_field_default_fields_alter(&$fields) {
  if (isset($fields['node-member_page-field_content_image']) && module_exists('debut_media') && !debut_member_is_recreating('debut_member')) {
    $fields['node-member_page-field_content_image']['field_instance']['display']['default']['settings']['image_style'] = 'medium_large';
  }
}

/**
 * Determine whether a feature is being recreated.
 */
function debut_member_is_recreating($feature = NULL) {
  // Test for Drush usage.
  if (function_exists('drush_get_command') && $command = drush_get_command()) {
    switch($command['command']) {
      case 'features-update-all':
        return TRUE;
      case 'features-update':
        // If a specific feature was requested, test for it. If not, return
        // true for any feature recreation.
        return is_null($feature) || in_array($feature, $command['arguments']);
    }
  }

  // Test for admin UI usage.
  $feature = is_null($feature) ? arg(3) : $feature;
  if ($_GET['q'] == "admin/structure/features/{$feature}/recreate") {
    return TRUE;
  }
  return FALSE;
}
